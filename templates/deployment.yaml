apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "c-lightning.fullname" . }}
  labels:
    app: {{ template "c-lightning.name" . }}
    chart: {{ template "c-lightning.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ template "c-lightning.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "c-lightning.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ template "c-lightning.fullname" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          args: "--disable-plugin bcli --plugin /opt/lightningd/plugins/sauron/sauron.py --sauron-api-endpoint {{ .Values.sauron.endpoint}} {{ .Values.extraArgs }}"
          resources:
  {{ toYaml .Values.resources | indent 10 }}
          ports:
            - name: rpc
              containerPort: {{ .Values.internalServices.rpcPort }}
            - name: p2p
              containerPort: {{ .Values.externalServices.p2pPort }}
          volumeMounts:
            - name: data
              mountPath: /root/.lightning
          lifecycle:
            preStop:
              exec:
                # Make sure we safely quit c-lightning so we don't corrupt
                # anything
                command: ["lightning-cli", "stop"]
      volumes:
        - name: data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "c-lightning.fullname" .) }}
        {{- else }}
          emptyDir: {}
        {{- end -}}